name: Release GiGL

on:
  # Triggers the workflow manually for now until we have full support for releasing:
  # - building and releasing docker images
  # - building and releasing KFP pipeline
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    name: Build and release pip whl
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    environment:
      # This CI environment contains relevant pip.conf and pyprci information to
      name: release
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    # autodoc analyses the code and docstrings by introspection after importing the modules.
    # For importing to work, we have to make sure that your modules can be found by Sphinx and
    # that dependencies can be resolved.
    - name: Setup Machine for releasing documentation
      uses: snapchat/gigl/.github/actions/setup-python-tools@main
      with:
          install_dev_deps: "true"
          setup_gcloud: "true"
          gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          gcp_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
    # We also make gigl available w/ editable install `-e` so that autodoc can find it.
    - name: Setup environment for publishing Python package
      run: |
        python -m pip install --upgrade build twine keyrings.google-artifactregistry-auth

    - name: Build Whl Distribution
      run: (cd python && python -m build)

    - name: Publish Package ðŸš€
      env:
        PYPIRC_CONTENTS: ${{ secrets.PYPIRC_CONTENTS }}
        PIP_CONF_CONTENTS: ${{ secrets.PIP_CONF_CONTENTS }}
      # We upload the build whls to Google Artifact Registry.
      # See: https://cloud.google.com/artifact-registry/docs/python/store-python
      # And: https://cloud.google.com/artifact-registry/docs/python/authentication
      run: |
        echo "$PYPIRC_CONTENTS" > ~/.pypirc
        mkdir -p ~/.pip
        echo "$PIP_CONF_CONTENTS" > ~/.pip/pip.conf
        gcloud config set artifacts/location us-central1
        gcloud config set artifacts/repository gigl
        python -m twine check python/dist/*
        python -m twine upload --repository-url https://us-central1-python.pkg.dev/${PROJECT_ID}/gigl python/dist/*

    - name: Post Publish Package
      if: always()
      run: |
        rm -rf ~/.pypirc
        rm -rf ~/.pip/pip.conf
