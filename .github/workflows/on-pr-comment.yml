name: On Demand Pr Comment Workflows

on:
  issue_comment:
    types: [created]

permissions:
  # Needed for gcloud auth: https://github.com/google-github-actions/auth
  id-token: 'write'
  contents: 'read'
  # Needed for commenting on PRs
  pull-requests: 'write'
  issues: 'write'

jobs:
  help:
    # HELP: /help - Show all available PR comment commands
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/help') }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Parse available commands
      id: parse_commands
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = '.github/workflows/on-pr-comment.yml';
          
          try {
            const content = fs.readFileSync(path, 'utf8');
            const lines = content.split('\n');
            const commands = [];
            
            // Go through the file sequentially
            let currentJob = null;
            let currentHelpText = null;
            let currentCommand = null;
            
            for (let i = 0; i < lines.length; i++) {
              const line = lines[i];
              
              // Check for job definition (starts at column 0, no leading spaces)
              if (/^[a-zA-Z0-9_-]+:$/.test(line.trim()) && !line.startsWith(' ')) {
                // If we've seen a previous job with a command, add it to commands
                if (currentJob && currentCommand) {
                  const description = currentHelpText || `Run ${currentJob.replace(/-/g, ' ')} workflow`;
                  commands.push(`- **${currentCommand}** - ${description}`);
                }
                
                // Start tracking new job
                currentJob = line.trim().replace(':', '');
                currentHelpText = null;
                currentCommand = null;
              }
              
              // Look for HELP comment
              if (line.includes('# HELP:')) {
                currentHelpText = line.split('# HELP:')[1].trim();
              }
              
              // Look for if condition with PR comment trigger
              if (line.includes('if:') && line.includes('contains(github.event.comment.body,')) {
                const match = line.match(/contains\(github\.event\.comment\.body,\s*'([^']+)'\)/);
                if (match) {
                  currentCommand = match[1];
                }
              }
            }
            
            // Don't forget the last job
            if (currentJob && currentCommand) {
              const description = currentHelpText || `Run ${currentJob.replace(/-/g, ' ')} workflow`;
              commands.push(`- **${currentCommand}** - ${description}`);
            }
            
            const helpMessage = `## 🤖 Available PR Commands
            
          You can trigger the following workflows by commenting on this PR:
          
          ${commands.join('\n')}
          
          ---
          
          💡 **Usage:** Simply comment on this PR with any of the commands above (e.g., \`/unit_test\`)
          
          ⏱️ **Note:** Commands may take some time to complete. Progress updates will be posted as comments.`;
            
            // Set output for the next step
            core.setOutput('help_message', helpMessage);
            
          } catch (error) {
            console.error('Error reading workflow file:', error);
            core.setOutput('help_message', '❌ Error: Could not read workflow file to generate help information.');
          }
    
    - name: Post help comment
      uses: snapchat/gigl/.github/actions/comment-on-pr@main
      with:
        pr_number: ${{ github.event.issue.number }}
        message: ${{ steps.parse_commands.outputs.help_message }}

  unit-test:
    # HELP: /unit_test - Run unit tests for the codebase
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/unit_test') }}
    runs-on: ubuntu-latest
    timeout-minutes: 55
    steps:
    - name: Run Unit Tests
      uses: snapchat/gigl/.github/actions/run-command-on-pr@main
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        pr_number: ${{ github.event.issue.number }}
        should_leave_progress_comments: "true"
        descriptive_workflow_name: "Unit Test"
        setup_gcloud: "true"
        # We use cloud run here instead of using github hosted runners because of limitation of tests
        # using GFile library (a.k.a anything that does IO w/ Tensorflow). GFile does not understand
        # how to leverage Workload Identity Federation to read assets from GCS, et al. See:
        # https://github.com/tensorflow/tensorflow/issues/57104
        use_cloud_run: "true"
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        gcp_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
        command: |
          make unit_test
  integration-test:
    # HELP: /integration_test - Run integration tests for the codebase
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/integration_test') }}
    runs-on: ubuntu-latest
    timeout-minutes: 70 # Tests as of 2025-05-16 are taking ~50 mins to complete, 40% buffer
    steps:
    - name: Run Integration Tests
      uses: snapchat/gigl/.github/actions/run-command-on-pr@main
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        pr_number: ${{ github.event.issue.number }}
        should_leave_progress_comments: "true"
        descriptive_workflow_name: "Integration Test"
        setup_gcloud: "true"
        use_cloud_run: "true"
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        gcp_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
        command: |
            make integration_test
  integration-e2e-test:
    # HELP: /e2e_test - Run end-to-end tests for the entire system
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/e2e_test') }}
    runs-on: ubuntu-latest
    timeout-minutes: 155 # Tests as of 2025-05-16 are taking ~110 mins to complete, 40% buffer
    steps:
    - name: Run E2E Tests
      uses: snapchat/gigl/.github/actions/run-command-on-pr@main
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        pr_number: ${{ github.event.issue.number }}
        should_leave_progress_comments: "true"
        descriptive_workflow_name: "E2E Test"
        setup_gcloud: "true"
        use_cloud_run: "true"
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        gcp_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
        command: |
          make run_all_e2e_tests

  notebooks-e2e-test:
    # HELP: /notebook_tests - Run tests on example notebooks to ensure they work correctly
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/notebook_tests') }}
    runs-on: ubuntu-latest
    timeout-minutes: 155 # Tests as of 2025-05-16 are taking ~110 mins to complete, 40% buffer
    steps:
    - name: Run Example Notebooks Tests
      uses: snapchat/gigl/.github/actions/run-command-on-pr@main
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        pr_number: ${{ github.event.issue.number }}
        should_leave_progress_comments: "true"
        descriptive_workflow_name: "Example Notebooks Test"
        setup_gcloud: "true"
        use_cloud_run: "true"
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        gcp_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
        command: |
          make notebooks_test


  lint-test:
    # HELP: /lint_test - Run code formatting and linting checks
    if: ${{ github.event.issue.pull_request && contains(github.event.comment.body, '/lint_test') }}
    runs-on: ubuntu-latest
    timeout-minutes: 20 # If our linting takes longer than 20 minutes something has gone very wrong...
    steps:
    - name: Run Linting Tests
      uses: snapchat/gigl/.github/actions/run-command-on-pr@main
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        pr_number: ${{ github.event.issue.number }}
        should_leave_progress_comments: "true"
        descriptive_workflow_name: "Lint Test"
        install_dev_deps: "true"
        setup_gcloud: "true"
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        gcp_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
        command: |
          source ~/.profile
          make check_format
          make assert_yaml_configs_parse
