name: CI Tests

on:
  # Run whenever GitHub‚Äôs merge queue asks for required checks
  # We add `pull_request` below to get around a merge queue status check limitation:
  # https://github.com/orgs/community/discussions/46757#discussioncomment-4912738
  pull_request:
  merge_group:
  push:

permissions:
  # Needed for gcloud auth: https://github.com/google-github-actions/auth
  id-token: 'write'
  contents: 'read'
  # Needed for commenting on PRs
  pull-requests: 'write'
  issues: 'write'

jobs:
  help:
    # HELP: /help - Show all available PR comment commands
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - uses: actions/setup-node@v4
    - run: npm install js-yaml
      
    - name: Parse available commands
      id: parse_commands
      uses: actions/github-script@v7
      with:
        script: |
          const yaml = require('js-yaml');
          const fs = require('fs');
          const path = '.github/workflows/on-pr-comment.yml';
          
          try {
            const content = fs.readFileSync(path, 'utf8');
            const data = yaml.load(content);
            console.log(data);
            const jobs = data.jobs;
            console.log(jobs);
            const commands = [];
            for (const job of jobs) {
              const jobName = job.name;
              const jobDescription = job.description;
              commands.push(`- **${jobName}** - ${jobDescription}`);
            }
            
            const helpMessage = `## ü§ñ Available PR Commands
            
          You can trigger the following workflows by commenting on this PR:
          
          ${commands.join('\n')}
          
          ---
          
          üí° **Usage:** Simply comment on this PR with any of the commands above (e.g., \`/unit_test\`)
          
          ‚è±Ô∏è **Note:** Commands may take some time to complete. Progress updates will be posted as comments.`;
            
            // Set output for the next step
            core.setOutput('help_message', helpMessage);
            
          } catch (error) {
            console.error('Error reading workflow file:', error);
            core.setOutput('help_message', '‚ùå Error: Could not read workflow file to generate help information.');
          }
    
    - name: Post help comment
      uses: snapchat/gigl/.github/actions/comment-on-pr@main
      with:
        pr_number: 267
        message: ${{ steps.parse_commands.outputs.help_message }}

  ci-unit-test:
    # Because of limitation discussed https://github.com/orgs/community/discussions/46757#discussioncomment-4912738
    # We skip when the workflow is triggered by a pull_request event; otherwise we will run the check twice.
    # Once before it gets into the merge queue and once when it is in the merge queue.
    # Our tests take a long time to run, so this is not ideal.
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup development environment
      uses: snapchat/gigl/.github/actions/setup-python-tools@main
      with:
          setup_gcloud: "true"
          gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          gcp_service_account_email: ${{ secrets.gcp_service_account_email }}
    - name: Run Unit Tests
      # We use cloud run here instead of using github hosted runners because of limitation of tests
      # using GFile library (a.k.a anything that does IO w/ Tensorflow). GFile does not understand
      # how to leverage Workload Identity Federation to read assets from GCS, et al. See:
      # https://github.com/tensorflow/tensorflow/issues/57104
      uses: snapchat/gigl/.github/actions/run-cloud-run-command-on-active-checkout@main
      with:
        cmd: "make unit_test"
        service_account:  ${{ secrets.gcp_service_account_email }}
        project:  ${{ vars.GCP_PROJECT_ID }}

  ci-integration-test:
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup development environment
      uses: snapchat/gigl/.github/actions/setup-python-tools@main
      with:
          setup_gcloud: "true"
          gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          gcp_service_account_email: ${{ secrets.gcp_service_account_email }}
    - name: Run Integration Tests
      uses: snapchat/gigl/.github/actions/run-cloud-run-command-on-active-checkout@main
      with:
        cmd: "make integration_test"
        service_account:  ${{ secrets.gcp_service_account_email }}
        project:  ${{ vars.GCP_PROJECT_ID }}

  ci-integration-e2e-test:
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup development environment
      uses: snapchat/gigl/.github/actions/setup-python-tools@main
      with:
          setup_gcloud: "true"
          gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          gcp_service_account_email: ${{ secrets.gcp_service_account_email }}
    - name: Run E2E Tests
      uses: snapchat/gigl/.github/actions/run-cloud-run-command-on-active-checkout@main
      with:
        cmd: "make run_all_e2e_tests"
        service_account:  ${{ secrets.gcp_service_account_email }}
        project:  ${{ vars.GCP_PROJECT_ID }}

  ci-integration-example-notebooks-test:
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup development environment
      uses: snapchat/gigl/.github/actions/setup-python-tools@main
      with:
          setup_gcloud: "true"
          gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          gcp_service_account_email: ${{ secrets.gcp_service_account_email }}
    - name: Run Example Notebook E2E Tests
      uses: snapchat/gigl/.github/actions/run-cloud-run-command-on-active-checkout@main
      with:
        cmd: "make notebooks_test"
        service_account:  ${{ secrets.gcp_service_account_email }}
        project:  ${{ vars.GCP_PROJECT_ID }}

  ci-lint-test:
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup development environment
      uses: snapchat/gigl/.github/actions/setup-python-tools@main
      with:
          install_dev_deps: "true"
          setup_gcloud: "true"
          gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          gcp_service_account_email: ${{ secrets.gcp_service_account_email }}
    - name: Run Lint Tests
      run: |
        source ~/.profile
        make check_format
        make assert_yaml_configs_parse
