name: Create Release

# This workflow can be triggered in two ways:
# 1. Manual dispatch: Choose bump type and project
# 2. Push to main/release branches: Automatically uses nightly build

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump'
        required: true
        default: 'nightly'
        type: choice
        options:
          - major
          - minor
          - patch
          - nightly
  push:
    # branches:
    #   - main
    #   - 'release/*'

jobs:
  create_release:
    runs-on: gigl-large-instances # x64 Ubuntu:latest w/ 4 cores, 16GB RAM, 150 GB SSD
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    outputs:
      current_version: ${{ steps.get_version.outputs.current_version }}
      new_version: ${{ steps.get_new_version.outputs.new_version }}
      release_branch_name: ${{ steps.get_new_version.outputs.release_branch_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Machine for release
      uses: snapchat/gigl/.github/actions/setup-python-tools@main
      with:
        setup_gcloud: "true"
        install_dev_deps: "true"
        gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        gcp_service_account_email: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

    - name: Setup Docker Buildx
      run: |
        docker buildx create --driver=docker-container --use
        sudo apt-get install qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Get current version
      id: get_version
      run: |
        CURRENT_VERSION=$(python -m scripts.bump_version --get_current_version)
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Set workflow variables
      id: set_vars
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "bump_type=${{ github.event.inputs.bump_type }}" >> $GITHUB_OUTPUT
        else
          echo "bump_type=nightly" >> $GITHUB_OUTPUT
        fi

    - name: Run versioning and release
      run: |
        python -m scripts.bump_version \
          --bump_type ${{ steps.set_vars.outputs.bump_type }} \
          --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Get new version
      id: get_new_version
      run: |
        NEW_VERSION=$(python -m scripts.bump_version --get_current_version)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        echo "release_branch_name=release/v${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "Release branch name: release/v${NEW_VERSION}"

    - name: Commit and Push Dep Vars
      uses: ./.github/actions/commit-and-push
      with:
        commit_message: "[AUTOMATED] Update dep.vars, and other relevant files with new image names"
        github_token: ${{ secrets.GITHUB_TOKEN }}
        to_new_branch_named: ${{ steps.get_new_version.outputs.release_branch_name }}


  release_cpu_src_images:
    needs: create_release
    runs-on: gigl-large-instances # x64 Ubuntu:latest w/ 4 cores, 16GB RAM, 150 GB SSD
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_release.outputs.release_branch_name }}

    - name: Release CPU src images
      run: |
        python -m scripts.release --release_type="cpu_src_images"



  release_cuda_src_images:
    needs: create_release
    runs-on: gigl-large-instances # x64 Ubuntu:latest w/ 4 cores, 16GB RAM, 150 GB SSD
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_release.outputs.release_branch_name }}

    - name: Release CUDA src images
      run: |
        python -m scripts.release --release_type="cuda_src_images"


  release_dev_images:
    needs: create_release
    runs-on: gigl-large-instances # x64 Ubuntu:latest w/ 4 cores, 16GB RAM, 150 GB SSD
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_release.outputs.release_branch_name }}

    - name: Release Dev images
      run: |
        python -m scripts.release --release_type="dev_images"


  release_kfp_pipeline:
    needs: create_release
    runs-on: gigl-large-instances # x64 Ubuntu:latest w/ 4 cores, 16GB RAM, 150 GB SSD
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_release.outputs.release_branch_name }}

    - name: Release KFP pipeline
      run: |
        python -m scripts.release --release_type="kfp_pipeline"

  create_release_pr:
    needs:
      - create_release
      - release_cpu_src_images
      - release_cuda_src_images
      - release_dev_images
      - release_kfp_pipeline
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_release.outputs.release_branch_name }}

    - name: Create a new PR
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr create --title "Release v${{ needs.create_release.outputs.new_version }}" \
        --body "## Release v${{ needs.create_release.outputs.new_version }}

        This PR contains the version bump from \`${{ needs.create_release.outputs.current_version }}\` to \`${{ needs.create_release.outputs.new_version }}\`.

        **Bump Type:** ${{ needs.create_release.outputs.bump_type }}
        **GCP Project:** ${{ secrets.GCP_PROJECT_ID }}
        **Trigger:** ${{ github.event_name }}

        ### Changes Made:
        - Updated version in \`python/gigl/__init__.py\`
        - Updated version in \`python/pyproject.toml\`
        - Updated Docker image references in \`dep_vars.env\`
        - Built and pushed new Docker images for CUDA, CPU, and Dataflow
        - Compiled and uploaded KFP pipeline to GCS

        ### What's Next:
        Please create a new release from this branch in the [GitHub Releases](https://github.com/snapchat/gigl/releases) page.

        ---
        *This PR was automatically created by the Create Release workflow.*" \
        --base main --head ${{ needs.create_release.outputs.release_branch_name }}

        PR_URL=$(gh pr view ${{ needs.create_release.outputs.release_branch_name }} --json url --jq '.url')
        echo "::notice title=PR URL::$PR_URL"


    - name: Create version tag
      run: |
        git tag "v${{ needs.create_release.outputs.new_version }}"
        git push origin "v${{ needs.create_release.outputs.new_version }}"


    - name: Output release information
      run: |
        echo "::notice title=Release PR Created::Release branch created: ${{ needs.create_release.outputs.release_branch_name }}"
        echo "::notice title=New Version::v${{ needs.create_release.outputs.new_version }}"
        echo "::notice title=Version Tag::v${{ needs.create_release.outputs.new_version }}"
        echo "::notice title=Bump Type::${{ inputs.bump_type }}"
        echo "::notice title=Trigger::${{ github.event_name }}"
