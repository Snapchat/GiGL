# This config is used to run heterogeneous DBLP self-supervised training and inference using in memory GiGL SGS. This can be run with `make run_het_dblp_sup_test`.
graphMetadata:
  # We have 3 nodes types in the DBLP Dataset: author, paper, and term. We also have 3
  # edge types: author -> paper, paper -> author, and term -> paper
  edgeTypes:
  - dstNodeType: paper
    relation: cites
    srcNodeType: paper
  - dstNodeType: paper
    relation: writes
    srcNodeType: author
  - dstNodeType: author
    relation: affiliated
    srcNodeType: institution
  nodeTypes:
  - paper
  - author
  - institution
taskMetadata:
  nodeAnchorBasedLinkPredictionTaskMetadata:
    # We aim to predict paper -> paper links in the graph.
    supervisionEdgeTypes:
    - dstNodeType: paper
      relation: cites
      srcNodeType: paper
datasetConfig:
  dataPreprocessorConfig:
    dataPreprocessorConfigClsPath: examples.MAG240M.preprocessor_config_heterogeneous.Mag240DataPreprocessorConfig
    # our implementation takes no runtime arguments; if provided these are passed to the constructor off dataPreprocessorConfigClsPath
    # dataPreprocessorArgs:
trainerConfig:
  trainerArgs:
    # Example argument to trainer
    log_every_n_batch: "1000"
    # The DBLP Dataset does not have specified labeled edges so we provide this field to indicate what
    # percentage of edges we should select as self-supervised labeled edges. Doing this randomly sets 5% as "labels".
    # Note that the current GiGL implementation does not remove these selected edges from the global set of edges, which may
    # have a slight negative impact on training specifically with self-supervised learning. This will improved on in the future.
    ssl_positive_label_percentage: "0.05"
    # Example of a dictionary fanout which has different fanout-per-hop for each edge type. Currently, we assume that all anchor node types
    # use the same fanout. If you want different anchor node types to have different fanouts, we encourage adding additional arguemnts here to parse
    # fanouts for each anchor node type.
    # Note that edge types must be provided as a tuple[str, str, str] in format (SRC_NODE_TYPE, RELATION, DST_NODE_TYPE), as demonstrated below.
    num_neighbors: "[10, 10]"
    main_batch_size: "256"
    random_batch_size: "256"
    num_max_train_batches: "20000"
    hid_dim: "256"
    out_dim: "256"
    val_every_n_batch: "1000"
    learning_rate: "0.005"
  command: python -m examples.link_prediction.heterogeneous_training
inferencerConfig:
  inferencerArgs:
    # Example argument to inferencer
    log_every_n_batch: "50"
    # Example of a dictionary fanout which has different fanout-per-hop for each edge type. Currently, we assume that all anchor node types
    # use the same fanout. If you want different anchor node types to have different fanouts, we encourage adding additional arguemnts here to parse
    # fanouts for each anchor node type.
    # Note that edge types must be provided as a tuple[str, str, str] in format (SRC_NODE_TYPE, RELATION, DST_NODE_TYPE), as demonstrated below.
    num_neighbors: "[10, 10]"
    hid_dim: "256"
    out_dim: "256"
  inferenceBatchSize: 256
  command: python -m examples.link_prediction.heterogeneous_inference
sharedConfig:
  shouldSkipAutomaticTempAssetCleanup: false
  shouldSkipInference: false
  # Model Evaluation is currently only supported for tabularized SGS GiGL pipelines. This will soon be added for in-mem SGS GiGL pipelines.
  shouldSkipModelEvaluation: true
featureFlags:
  should_run_glt_backend: 'True'
