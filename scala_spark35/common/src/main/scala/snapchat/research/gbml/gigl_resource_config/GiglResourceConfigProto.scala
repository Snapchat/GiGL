// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.gigl_resource_config

object GiglResourceConfigProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      snapchat.research.gbml.gigl_resource_config.SparkResourceConfig,
      snapchat.research.gbml.gigl_resource_config.DataflowResourceConfig,
      snapchat.research.gbml.gigl_resource_config.DataPreprocessorConfig,
      snapchat.research.gbml.gigl_resource_config.VertexAiTrainerConfig,
      snapchat.research.gbml.gigl_resource_config.KFPTrainerConfig,
      snapchat.research.gbml.gigl_resource_config.LocalTrainerConfig,
      snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig,
      snapchat.research.gbml.gigl_resource_config.KFPResourceConfig,
      snapchat.research.gbml.gigl_resource_config.LocalResourceConfig,
      snapchat.research.gbml.gigl_resource_config.VertexAiGraphStoreConfig,
      snapchat.research.gbml.gigl_resource_config.DistributedTrainerConfig,
      snapchat.research.gbml.gigl_resource_config.TrainerResourceConfig,
      snapchat.research.gbml.gigl_resource_config.InferencerResourceConfig,
      snapchat.research.gbml.gigl_resource_config.SharedResourceConfig,
      snapchat.research.gbml.gigl_resource_config.GiglResourceConfig
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CjFzbmFwY2hhdC9yZXNlYXJjaC9nYm1sL2dpZ2xfcmVzb3VyY2VfY29uZmlnLnByb3RvEhZzbmFwY2hhdC5yZXNlYXJjaC5nY
  m1sIrgBChNTcGFya1Jlc291cmNlQ29uZmlnEjMKDG1hY2hpbmVfdHlwZRgBIAEoCUIQ4j8NEgttYWNoaW5lVHlwZVILbWFjaGluZ
  VR5cGUSNwoObnVtX2xvY2FsX3NzZHMYAiABKA1CEeI/DhIMbnVtTG9jYWxTc2RzUgxudW1Mb2NhbFNzZHMSMwoMbnVtX3JlcGxpY
  2FzGAMgASgNQhDiPw0SC251bVJlcGxpY2FzUgtudW1SZXBsaWNhcyLuAQoWRGF0YWZsb3dSZXNvdXJjZUNvbmZpZxIwCgtudW1fd
  29ya2VycxgBIAEoDUIP4j8MEgpudW1Xb3JrZXJzUgpudW1Xb3JrZXJzEjoKD21heF9udW1fd29ya2VycxgCIAEoDUIS4j8PEg1tY
  XhOdW1Xb3JrZXJzUg1tYXhOdW1Xb3JrZXJzEjMKDG1hY2hpbmVfdHlwZRgDIAEoCUIQ4j8NEgttYWNoaW5lVHlwZVILbWFjaGluZ
  VR5cGUSMQoMZGlza19zaXplX2diGAQgASgNQg/iPwwSCmRpc2tTaXplR2JSCmRpc2tTaXplR2IiqAIKFkRhdGFQcmVwcm9jZXNzb
  3JDb25maWcShQEKGGVkZ2VfcHJlcHJvY2Vzc29yX2NvbmZpZxgBIAEoCzIuLnNuYXBjaGF0LnJlc2VhcmNoLmdibWwuRGF0YWZsb
  3dSZXNvdXJjZUNvbmZpZ0Ib4j8YEhZlZGdlUHJlcHJvY2Vzc29yQ29uZmlnUhZlZGdlUHJlcHJvY2Vzc29yQ29uZmlnEoUBChhub
  2RlX3ByZXByb2Nlc3Nvcl9jb25maWcYAiABKAsyLi5zbmFwY2hhdC5yZXNlYXJjaC5nYm1sLkRhdGFmbG93UmVzb3VyY2VDb25ma
  WdCG+I/GBIWbm9kZVByZXByb2Nlc3NvckNvbmZpZ1IWbm9kZVByZXByb2Nlc3NvckNvbmZpZyLWAQoVVmVydGV4QWlUcmFpbmVyQ
  29uZmlnEjMKDG1hY2hpbmVfdHlwZRgBIAEoCUIQ4j8NEgttYWNoaW5lVHlwZVILbWFjaGluZVR5cGUSJwoIZ3B1X3R5cGUYAiABK
  AlCDOI/CRIHZ3B1VHlwZVIHZ3B1VHlwZRIqCglncHVfbGltaXQYAyABKA1CDeI/ChIIZ3B1TGltaXRSCGdwdUxpbWl0EjMKDG51b
  V9yZXBsaWNhcxgEIAEoDUIQ4j8NEgtudW1SZXBsaWNhc1ILbnVtUmVwbGljYXMiiQIKEEtGUFRyYWluZXJDb25maWcSMAoLY3B1X
  3JlcXVlc3QYASABKAlCD+I/DBIKY3B1UmVxdWVzdFIKY3B1UmVxdWVzdBI5Cg5tZW1vcnlfcmVxdWVzdBgCIAEoCUIS4j8PEg1tZ
  W1vcnlSZXF1ZXN0Ug1tZW1vcnlSZXF1ZXN0EicKCGdwdV90eXBlGAMgASgJQgziPwkSB2dwdVR5cGVSB2dwdVR5cGUSKgoJZ3B1X
  2xpbWl0GAQgASgNQg3iPwoSCGdwdUxpbWl0UghncHVMaW1pdBIzCgxudW1fcmVwbGljYXMYBSABKA1CEOI/DRILbnVtUmVwbGljY
  XNSC251bVJlcGxpY2FzIkYKEkxvY2FsVHJhaW5lckNvbmZpZxIwCgtudW1fd29ya2VycxgBIAEoDUIP4j8MEgpudW1Xb3JrZXJzU
  gpudW1Xb3JrZXJzIscCChZWZXJ0ZXhBaVJlc291cmNlQ29uZmlnEjMKDG1hY2hpbmVfdHlwZRgBIAEoCUIQ4j8NEgttYWNoaW5lV
  HlwZVILbWFjaGluZVR5cGUSJwoIZ3B1X3R5cGUYAiABKAlCDOI/CRIHZ3B1VHlwZVIHZ3B1VHlwZRIqCglncHVfbGltaXQYAyABK
  A1CDeI/ChIIZ3B1TGltaXRSCGdwdUxpbWl0EjMKDG51bV9yZXBsaWNhcxgEIAEoDUIQ4j8NEgtudW1SZXBsaWNhc1ILbnVtUmVwb
  GljYXMSJgoHdGltZW91dBgFIAEoDUIM4j8JEgd0aW1lb3V0Ugd0aW1lb3V0EkYKE2djcF9yZWdpb25fb3ZlcnJpZGUYBiABKAlCF
  uI/ExIRZ2NwUmVnaW9uT3ZlcnJpZGVSEWdjcFJlZ2lvbk92ZXJyaWRlIooCChFLRlBSZXNvdXJjZUNvbmZpZxIwCgtjcHVfcmVxd
  WVzdBgBIAEoCUIP4j8MEgpjcHVSZXF1ZXN0UgpjcHVSZXF1ZXN0EjkKDm1lbW9yeV9yZXF1ZXN0GAIgASgJQhLiPw8SDW1lbW9ye
  VJlcXVlc3RSDW1lbW9yeVJlcXVlc3QSJwoIZ3B1X3R5cGUYAyABKAlCDOI/CRIHZ3B1VHlwZVIHZ3B1VHlwZRIqCglncHVfbGlta
  XQYBCABKA1CDeI/ChIIZ3B1TGltaXRSCGdwdUxpbWl0EjMKDG51bV9yZXBsaWNhcxgFIAEoDUIQ4j8NEgtudW1SZXBsaWNhc1ILb
  nVtUmVwbGljYXMiRwoTTG9jYWxSZXNvdXJjZUNvbmZpZxIwCgtudW1fd29ya2VycxgBIAEoDUIP4j8MEgpudW1Xb3JrZXJzUgpud
  W1Xb3JrZXJzIu4BChhWZXJ0ZXhBaUdyYXBoU3RvcmVDb25maWcSbQoQZ3JhcGhfc3RvcmVfcG9vbBgBIAEoCzIuLnNuYXBjaGF0L
  nJlc2VhcmNoLmdibWwuVmVydGV4QWlSZXNvdXJjZUNvbmZpZ0IT4j8QEg5ncmFwaFN0b3JlUG9vbFIOZ3JhcGhTdG9yZVBvb2wSY
  woMY29tcHV0ZV9wb29sGAIgASgLMi4uc25hcGNoYXQucmVzZWFyY2guZ2JtbC5WZXJ0ZXhBaVJlc291cmNlQ29uZmlnQhDiPw0SC
  2NvbXB1dGVQb29sUgtjb21wdXRlUG9vbCKdAwoYRGlzdHJpYnV0ZWRUcmFpbmVyQ29uZmlnEoQBChh2ZXJ0ZXhfYWlfdHJhaW5lc
  l9jb25maWcYASABKAsyLS5zbmFwY2hhdC5yZXNlYXJjaC5nYm1sLlZlcnRleEFpVHJhaW5lckNvbmZpZ0Ia4j8XEhV2ZXJ0ZXhBa
  VRyYWluZXJDb25maWdIAFIVdmVydGV4QWlUcmFpbmVyQ29uZmlnEm8KEmtmcF90cmFpbmVyX2NvbmZpZxgCIAEoCzIoLnNuYXBja
  GF0LnJlc2VhcmNoLmdibWwuS0ZQVHJhaW5lckNvbmZpZ0IV4j8SEhBrZnBUcmFpbmVyQ29uZmlnSABSEGtmcFRyYWluZXJDb25ma
  WcSdwoUbG9jYWxfdHJhaW5lcl9jb25maWcYAyABKAsyKi5zbmFwY2hhdC5yZXNlYXJjaC5nYm1sLkxvY2FsVHJhaW5lckNvbmZpZ
  0IX4j8UEhJsb2NhbFRyYWluZXJDb25maWdIAFISbG9jYWxUcmFpbmVyQ29uZmlnQhAKDnRyYWluZXJfY29uZmlnIscEChVUcmFpb
  mVyUmVzb3VyY2VDb25maWcShQEKGHZlcnRleF9haV90cmFpbmVyX2NvbmZpZxgBIAEoCzIuLnNuYXBjaGF0LnJlc2VhcmNoLmdib
  WwuVmVydGV4QWlSZXNvdXJjZUNvbmZpZ0Ia4j8XEhV2ZXJ0ZXhBaVRyYWluZXJDb25maWdIAFIVdmVydGV4QWlUcmFpbmVyQ29uZ
  mlnEnAKEmtmcF90cmFpbmVyX2NvbmZpZxgCIAEoCzIpLnNuYXBjaGF0LnJlc2VhcmNoLmdibWwuS0ZQUmVzb3VyY2VDb25maWdCF
  eI/EhIQa2ZwVHJhaW5lckNvbmZpZ0gAUhBrZnBUcmFpbmVyQ29uZmlnEngKFGxvY2FsX3RyYWluZXJfY29uZmlnGAMgASgLMisuc
  25hcGNoYXQucmVzZWFyY2guZ2JtbC5Mb2NhbFJlc291cmNlQ29uZmlnQhfiPxQSEmxvY2FsVHJhaW5lckNvbmZpZ0gAUhJsb2Nhb
  FRyYWluZXJDb25maWcSpwEKJHZlcnRleF9haV9ncmFwaF9zdG9yZV90cmFpbmVyX2NvbmZpZxgEIAEoCzIwLnNuYXBjaGF0LnJlc
  2VhcmNoLmdibWwuVmVydGV4QWlHcmFwaFN0b3JlQ29uZmlnQiTiPyESH3ZlcnRleEFpR3JhcGhTdG9yZVRyYWluZXJDb25maWdIA
  FIfdmVydGV4QWlHcmFwaFN0b3JlVHJhaW5lckNvbmZpZ0IQCg50cmFpbmVyX2NvbmZpZyKHBQoYSW5mZXJlbmNlclJlc291cmNlQ
  29uZmlnEo4BCht2ZXJ0ZXhfYWlfaW5mZXJlbmNlcl9jb25maWcYASABKAsyLi5zbmFwY2hhdC5yZXNlYXJjaC5nYm1sLlZlcnRle
  EFpUmVzb3VyY2VDb25maWdCHeI/GhIYdmVydGV4QWlJbmZlcmVuY2VyQ29uZmlnSABSGHZlcnRleEFpSW5mZXJlbmNlckNvbmZpZ
  xKNAQoaZGF0YWZsb3dfaW5mZXJlbmNlcl9jb25maWcYAiABKAsyLi5zbmFwY2hhdC5yZXNlYXJjaC5nYm1sLkRhdGFmbG93UmVzb
  3VyY2VDb25maWdCHeI/GhIYZGF0YWZsb3dJbmZlcmVuY2VyQ29uZmlnSABSGGRhdGFmbG93SW5mZXJlbmNlckNvbmZpZxKBAQoXb
  G9jYWxfaW5mZXJlbmNlcl9jb25maWcYAyABKAsyKy5zbmFwY2hhdC5yZXNlYXJjaC5nYm1sLkxvY2FsUmVzb3VyY2VDb25maWdCG
  uI/FxIVbG9jYWxJbmZlcmVuY2VyQ29uZmlnSABSFWxvY2FsSW5mZXJlbmNlckNvbmZpZxKwAQondmVydGV4X2FpX2dyYXBoX3N0b
  3JlX2luZmVyZW5jZXJfY29uZmlnGAQgASgLMjAuc25hcGNoYXQucmVzZWFyY2guZ2JtbC5WZXJ0ZXhBaUdyYXBoU3RvcmVDb25ma
  WdCJ+I/JBIidmVydGV4QWlHcmFwaFN0b3JlSW5mZXJlbmNlckNvbmZpZ0gAUiJ2ZXJ0ZXhBaUdyYXBoU3RvcmVJbmZlcmVuY2VyQ
  29uZmlnQhMKEWluZmVyZW5jZXJfY29uZmlnIpcIChRTaGFyZWRSZXNvdXJjZUNvbmZpZxJ+Cg9yZXNvdXJjZV9sYWJlbHMYASADK
  AsyQC5zbmFwY2hhdC5yZXNlYXJjaC5nYm1sLlNoYXJlZFJlc291cmNlQ29uZmlnLlJlc291cmNlTGFiZWxzRW50cnlCE+I/EBIOc
  mVzb3VyY2VMYWJlbHNSDnJlc291cmNlTGFiZWxzEo4BChVjb21tb25fY29tcHV0ZV9jb25maWcYAiABKAsyQC5zbmFwY2hhdC5yZ
  XNlYXJjaC5nYm1sLlNoYXJlZFJlc291cmNlQ29uZmlnLkNvbW1vbkNvbXB1dGVDb25maWdCGOI/FRITY29tbW9uQ29tcHV0ZUNvb
  mZpZ1ITY29tbW9uQ29tcHV0ZUNvbmZpZxqUBQoTQ29tbW9uQ29tcHV0ZUNvbmZpZxImCgdwcm9qZWN0GAEgASgJQgziPwkSB3Byb
  2plY3RSB3Byb2plY3QSIwoGcmVnaW9uGAIgASgJQgviPwgSBnJlZ2lvblIGcmVnaW9uEkMKEnRlbXBfYXNzZXRzX2J1Y2tldBgDI
  AEoCUIV4j8SEhB0ZW1wQXNzZXRzQnVja2V0UhB0ZW1wQXNzZXRzQnVja2V0ElwKG3RlbXBfcmVnaW9uYWxfYXNzZXRzX2J1Y2tld
  BgEIAEoCUId4j8aEhh0ZW1wUmVnaW9uYWxBc3NldHNCdWNrZXRSGHRlbXBSZWdpb25hbEFzc2V0c0J1Y2tldBJDChJwZXJtX2Fzc
  2V0c19idWNrZXQYBSABKAlCFeI/EhIQcGVybUFzc2V0c0J1Y2tldFIQcGVybUFzc2V0c0J1Y2tldBJaCht0ZW1wX2Fzc2V0c19ic
  V9kYXRhc2V0X25hbWUYBiABKAlCHOI/GRIXdGVtcEFzc2V0c0JxRGF0YXNldE5hbWVSF3RlbXBBc3NldHNCcURhdGFzZXROYW1lE
  lYKGWVtYmVkZGluZ19icV9kYXRhc2V0X25hbWUYByABKAlCG+I/GBIWZW1iZWRkaW5nQnFEYXRhc2V0TmFtZVIWZW1iZWRkaW5nQ
  nFEYXRhc2V0TmFtZRJWChlnY3Bfc2VydmljZV9hY2NvdW50X2VtYWlsGAggASgJQhviPxgSFmdjcFNlcnZpY2VBY2NvdW50RW1ha
  WxSFmdjcFNlcnZpY2VBY2NvdW50RW1haWwSPAoPZGF0YWZsb3dfcnVubmVyGAsgASgJQhPiPxASDmRhdGFmbG93UnVubmVyUg5kY
  XRhZmxvd1J1bm5lchpXChNSZXNvdXJjZUxhYmVsc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCI
  AEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIvcIChJHaWdsUmVzb3VyY2VDb25maWcSWwoac2hhcmVkX3Jlc291cmNlX2NvbmZpZ
  191cmkYASABKAlCHOI/GRIXc2hhcmVkUmVzb3VyY2VDb25maWdVcmlIAFIXc2hhcmVkUmVzb3VyY2VDb25maWdVcmkSfwoWc2hhc
  mVkX3Jlc291cmNlX2NvbmZpZxgCIAEoCzIsLnNuYXBjaGF0LnJlc2VhcmNoLmdibWwuU2hhcmVkUmVzb3VyY2VDb25maWdCGeI/F
  hIUc2hhcmVkUmVzb3VyY2VDb25maWdIAFIUc2hhcmVkUmVzb3VyY2VDb25maWcSeAoTcHJlcHJvY2Vzc29yX2NvbmZpZxgMIAEoC
  zIuLnNuYXBjaGF0LnJlc2VhcmNoLmdibWwuRGF0YVByZXByb2Nlc3NvckNvbmZpZ0IX4j8UEhJwcmVwcm9jZXNzb3JDb25maWdSE
  nByZXByb2Nlc3NvckNvbmZpZxJ/ChdzdWJncmFwaF9zYW1wbGVyX2NvbmZpZxgNIAEoCzIrLnNuYXBjaGF0LnJlc2VhcmNoLmdib
  WwuU3BhcmtSZXNvdXJjZUNvbmZpZ0Ia4j8XEhVzdWJncmFwaFNhbXBsZXJDb25maWdSFXN1YmdyYXBoU2FtcGxlckNvbmZpZxJ8C
  hZzcGxpdF9nZW5lcmF0b3JfY29uZmlnGA4gASgLMisuc25hcGNoYXQucmVzZWFyY2guZ2JtbC5TcGFya1Jlc291cmNlQ29uZmlnQ
  hniPxYSFHNwbGl0R2VuZXJhdG9yQ29uZmlnUhRzcGxpdEdlbmVyYXRvckNvbmZpZxJtCg50cmFpbmVyX2NvbmZpZxgPIAEoCzIwL
  nNuYXBjaGF0LnJlc2VhcmNoLmdibWwuRGlzdHJpYnV0ZWRUcmFpbmVyQ29uZmlnQhQYAeI/DxINdHJhaW5lckNvbmZpZ1INdHJha
  W5lckNvbmZpZxJ0ChFpbmZlcmVuY2VyX2NvbmZpZxgQIAEoCzIuLnNuYXBjaGF0LnJlc2VhcmNoLmdibWwuRGF0YWZsb3dSZXNvd
  XJjZUNvbmZpZ0IXGAHiPxISEGluZmVyZW5jZXJDb25maWdSEGluZmVyZW5jZXJDb25maWcSgQEKF3RyYWluZXJfcmVzb3VyY2VfY
  29uZmlnGBEgASgLMi0uc25hcGNoYXQucmVzZWFyY2guZ2JtbC5UcmFpbmVyUmVzb3VyY2VDb25maWdCGuI/FxIVdHJhaW5lclJlc
  291cmNlQ29uZmlnUhV0cmFpbmVyUmVzb3VyY2VDb25maWcSjQEKGmluZmVyZW5jZXJfcmVzb3VyY2VfY29uZmlnGBIgASgLMjAuc
  25hcGNoYXQucmVzZWFyY2guZ2JtbC5JbmZlcmVuY2VyUmVzb3VyY2VDb25maWdCHeI/GhIYaW5mZXJlbmNlclJlc291cmNlQ29uZ
  mlnUhhpbmZlcmVuY2VyUmVzb3VyY2VDb25maWdCEQoPc2hhcmVkX3Jlc291cmNlKuMDCglDb21wb25lbnQSLQoRQ29tcG9uZW50X
  1Vua25vd24QABoW4j8TEhFDb21wb25lbnRfVW5rbm93bhI/ChpDb21wb25lbnRfQ29uZmlnX1ZhbGlkYXRvchABGh/iPxwSGkNvb
  XBvbmVudF9Db25maWdfVmFsaWRhdG9yEj8KGkNvbXBvbmVudF9Db25maWdfUG9wdWxhdG9yEAIaH+I/HBIaQ29tcG9uZW50X0Nvb
  mZpZ19Qb3B1bGF0b3ISQQobQ29tcG9uZW50X0RhdGFfUHJlcHJvY2Vzc29yEAMaIOI/HRIbQ29tcG9uZW50X0RhdGFfUHJlcHJvY
  2Vzc29yEj8KGkNvbXBvbmVudF9TdWJncmFwaF9TYW1wbGVyEAQaH+I/HBIaQ29tcG9uZW50X1N1YmdyYXBoX1NhbXBsZXISPQoZQ
  29tcG9uZW50X1NwbGl0X0dlbmVyYXRvchAFGh7iPxsSGUNvbXBvbmVudF9TcGxpdF9HZW5lcmF0b3ISLQoRQ29tcG9uZW50X1RyY
  WluZXIQBhoW4j8TEhFDb21wb25lbnRfVHJhaW5lchIzChRDb21wb25lbnRfSW5mZXJlbmNlchAHGhniPxYSFENvbXBvbmVudF9Jb
  mZlcmVuY2VyYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}
