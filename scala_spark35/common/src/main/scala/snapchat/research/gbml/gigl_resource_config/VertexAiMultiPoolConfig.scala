// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package snapchat.research.gbml.gigl_resource_config

/** Configuration for Multipool Vertex AI jobs.
  * See https://cloud.google.com/vertex-ai/docs/training/distributed-training for more info.
  * NOTE: The first worker pool will be split into the primary replica and "Workers".
  * For example:
  * pools = [
  *   {
  *     "machine_type": "n1-standard-8",
  *     "num_replicas": 16
  *   },
  *   {
  *     "machine_type": "n1-standard-8",
  *     "gpu_type": "nvidia-tesla-v100",
  *     "gpu_limit": 1,
  *     "num_replicas": 16
  *   }
  * ]
  * Will have the Primary be: {}
  * {
  *   "machine_type": "n1-standard-8",
  *   "num_replicas": 1
  * }
  * And the Workers be:
  * {
  *   "machine_type": "n1-standard-8",
  *   "num_replicas": 15
  * }
  * And the parameter servers be:
  * {
  *   "machine_type": "n1-standard-8",
  *   "gpu_type": "nvidia-tesla-v100",
  *   "gpu_limit": 1,
  *   "num_replicas": 16
  * }
  */
@SerialVersionUID(0L)
final case class VertexAiMultiPoolConfig(
    pools: _root_.scala.Seq[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[VertexAiMultiPoolConfig] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      pools.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1

    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      pools.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearPools = copy(pools = _root_.scala.Seq.empty)
    def addPools(__vs: snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig *): VertexAiMultiPoolConfig = addAllPools(__vs)
    def addAllPools(__vs: Iterable[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig]): VertexAiMultiPoolConfig = copy(pools = pools ++ __vs)
    def withPools(__v: _root_.scala.Seq[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig]): VertexAiMultiPoolConfig = copy(pools = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => pools
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(pools.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig.type = snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig
    // @@protoc_insertion_point(GeneratedMessage[snapchat.research.gbml.VertexAiMultiPoolConfig])
}

object VertexAiMultiPoolConfig extends scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig = {
    val __pools: _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig] = new _root_.scala.collection.immutable.VectorBuilder[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __pools += _root_.scalapb.LiteParser.readMessage[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig(
        pools = __pools.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig(
        pools = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GiglResourceConfigProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GiglResourceConfigProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig(
    pools = _root_.scala.Seq.empty
  )
  implicit class VertexAiMultiPoolConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig](_l) {
    def pools: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig]] = field(_.pools)((c_, f_) => c_.copy(pools = f_))
  }
  final val POOLS_FIELD_NUMBER = 1
  def of(
    pools: _root_.scala.Seq[snapchat.research.gbml.gigl_resource_config.VertexAiResourceConfig]
  ): _root_.snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig = _root_.snapchat.research.gbml.gigl_resource_config.VertexAiMultiPoolConfig(
    pools
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[snapchat.research.gbml.VertexAiMultiPoolConfig])
}
